\documentclass[9pt, compress]{beamer}
\usetheme[progressbar=frametitle,
numbering=fraction,
everytitleformat=regular]{m}

\usepackage{color}
\usepackage{adjustbox}
\usepackage{fontawesome}
\usepackage{graphicx}


\hypersetup{bookmarksopen=true,bookmarksopenlevel=4}
\setcounter{tocdepth}{4}

\definecolor{mygreen}{rgb}{0.07, 0.53, 0.03}
\definecolor{myorange}{rgb}{1.0, 0.31, 0.0}
\definecolor{darkred}{rgb}{0.55, 0.0, 0.0}


\definecolor{geom}{rgb}{1.0, 0.31, 0.0}
\definecolor{aes}{rgb}{0.00, 1.00, 0.00}
\definecolor{scale}{rgb}{0.13, 0.67,0.8}
\definecolor{theme}{rgb}{1.00, 0.0, 0.56}
     

\title{GGPLOT2 Course, \\ AufLand Conference}
\date{26. November 2015}
\author{Eduard Szöcs}
\institute{Institute for Environmental Sciences - University of Koblenz-Landau \\[1em] \includegraphics[width=2.5cm]{fig/Institut.png}}



%%% ----------------------------------------------------------------------------
\begin{document}
<<setup, echo=FALSE>>=
require(knitr)
knit_theme$set("edit-kwrite")
opts_chunk$set(size = "footnotesize",
               fig.align = 'center', 
               fig.width = 6, fig.height = 5, out.width = '.6\\linewidth',
               cache = TRUE)
@
%%% ----------------------------------------------------------------------------
\maketitle


%%% ----------------------------------------------------------------------------
\section{Intro}
\begin{frame}
\frametitle{Short Intro: Eduard Szöcs}
\begin{itemize}
\item PhD student @Quantitative Landscape Ecology
\item Environmental Sciences \& Ecotoxicology
\item Research:
  \begin{itemize}
  \item Statistical Ecology - Eco(toxico)logical Statistics
  \item Effects and distribution of pesticides in freshwaters
  \end{itemize}
\item R-Programming:
  \begin{itemize}
    \item R-user for 6years
    \item Author/Co-Author of 3 CRAN packages (taxize, webchem, rspear)
    \item Other packages on github (restax, esmisc)
    \item Minor contribitions to other pkgs (e.g. vegan)
  \end{itemize}
\end{itemize}
\url{edild.github.io} \hfill \faTwitter @EduardSzoecs
\end{frame}

\begin{frame}
\frametitle{Short Intro: Gunnar Oehmichen}
\begin{itemize}
  \item Diploma in Environmental Sciences
  \item Diploma Thesis @Quantitative Landscape Ecology
  \item Topics: Ecology, Renewable Energies and Conservation
  \item Graduate Assistant @Environmental Sciences Lab: Renewable Energies
  \begin{itemize}
    \item Automated display of Spatial Information on Renewable Energies in a WebGIS
  \end{itemize}
  \item R-Programming:
    \begin{itemize}
      \item R-User for 5 Years
      \item Assistant in several Summerschools (@UFZ-Leipzig, @Landau)
    \end{itemize}
\end{itemize}
\end{frame}


\begin{frame}
\frametitle{Course Outline}
\begin{itemize}
  \item Short intro \& course organisation, Software preparation
  \item An introduction to ggplot2.
  \begin{itemize}
    \item Basic ggplot2 usage
    \item Customization of your plots
    \item Free time for specific Q.
  \end{itemize}
  \item After 4 hours of ggplot2 you should be an expert ;)
\end{itemize}

Course material: \url{https://github.com/EDiLD/r_landau_2015}
\end{frame}



\begin{frame}
\frametitle{Preliminaries}
\begin{itemize}
  \item Download the course repository.
  \item No formal R knowledge required to follow.
  \item (Install RStudio and packages needed).
  \item Just open the `.R` files in RStudio and execute the script line by line: `CTRL + ENTER`
\end{itemize}
\end{frame}


\begin{frame}
\frametitle{Datasets}
We will use 2 data sets in this course:
\begin{enumerate}
  \item Frog monitoring in Swiss (Slides).
  \item Diamond prices (Exercises).
\end{enumerate}
\begin{figure}
\includegraphics[width=.2\textwidth]{fig/blmeco.jpg}
\includegraphics[width=.2\textwidth]{fig/ggplot2.jpg}
\end{figure}
\begin{alertblock}{Tip:}
Don't buy the old ggplot2 book - a new one is coming soon...
\end{alertblock}
\end{frame}



\begin{frame}[fragile]
\frametitle{frogs abundance}
<<message=FALSE>>=
library(blmeco)
data(frogs)
head(frogs)
@

<<>>=
frogs$fish <- factor(frogs$fish)
frogs$vegetation <- factor(frogs$vegetation)
@

\begin{alertblock}{Questions:}
What influences frog abundance?
Can we predict frog abundance (ala SDM)?
\end{alertblock}
\end{frame}


\begin{frame}[fragile]
\frametitle{diamonds dataset}
<<message=FALSE>>=
library(ggplot2)
data(diamonds)
head(diamonds)
?diamonds
@
\begin{alertblock}{Questions:}
What factors are crucial for the diamond prices?
\end{alertblock}
\end{frame}



%%% ----------------------------------------------------------------------------
%%% ggplot2 basics
\plain{ggplot2 basics}
\begin{frame}[fragile]
\frametitle{What is ggplot2?}
% \begin{columns}
%   \begin{column}{0.5\textwidth}
% 
%   \end{column}
%   \begin{column}{0.5\textwidth}
% 
%   \end{column}
% \end{columns}

\begin{columns}
  \begin{column}{0.7\textwidth}
  \begin{itemize}
  \item A graphic system for R
  \item gg = \textcolor{mLightBrown}{\textbf{G}}rammar of \textcolor{mLightBrown}{\textbf{G}}raphics (Wilkinson 2005)
  \item \emph{Grammar}: A set of components that define a sentence 
  \item \textcolor{mLightBrown}{gg}plot defines a grammar to create plots
  \item Consistent, intuitive, easy to learn
\end{itemize}
  \end{column}
  \begin{column}{0.3\textwidth}
   \includegraphics[width=\textwidth]{fig/wilk.jpg}
  \end{column}
\end{columns}
\end{frame}
\begin{frame}[fragile]
\frametitle{Why ggplot2?}
\includegraphics[width = 1.1\textwidth]{fig/ggplot_ex.pdf}
\end{frame}


\begin{frame}[fragile]
\frametitle{With base R}
  <<out.width='0.6\\textwidth', warning = FALSE>>=
cols <- c('orange', 'steelblue')
plot(count1 ~ waterarea, data = frogs, type = 'n', log = 'x')
with(frogs, points(waterarea, count1, col = cols[fish], pch = 16))
legend('topleft', legend = c('fish 0', 'fish 1'), pch = 16, 
       col = cols, 
       cex = 0.8)
@
\end{frame}



\begin{frame}[fragile]
\frametitle{With ggplot2}
<<warning = FALSE>>=
ggplot(frogs) +
  geom_point(aes(x = waterarea, y = count1, col = fish)) +
  scale_x_log10()
@
\end{frame}


\begin{frame}[fragile]
\frametitle{Why ggplot2?}
\begin{columns}
  \begin{column}{0.5\textwidth}
    \textcolor{mLightBrown}{\textbf{base graphics}}\\
    \begin{itemize} 
    \item more work / code
    \item legends, colors?
    \item defaults ok
    \item multipanel plots?
    \item can do anything
    \item have to know the \emph{tricks}
    \end{itemize}
  \end{column}
  \begin{column}{0.5\textwidth}
    \textcolor{mLightBrown}{\textbf{ggplot2}}\\
    \begin{itemize} 
    \item quick-and-dirty and complex
    \item Automatic legends, colors!
    \item nice defaults
    \item easy multipanel plots
    \item restrictions (e.g. 2nd y-axis)
    \item intuitive syntax
    \end{itemize}
  \end{column}
\end{columns}
\vspace{1em}
\pause
\begin{alertblock}{Tip:}
If a plot is too complicated to draw with ggplot2, reconsider if it's a good representation of your data!
\end{alertblock}
\end{frame}



\begin{frame}[fragile]
\frametitle{The Grammar}
<<eval = FALSE>>=
ggplot(frogs) +
  geom_point(
    aes(x = waterarea, y = count1, col = fish)) +
  scale_x_log10() +
  theme_bw()
@
\begin{description}
  \item[ggplot()] The main function. Can specify the data set and variables \textbf{globally}.
    \item[\textcolor{geom}{geom}] A geometric object: \texttt{geom\_point, geom\_line, geom\_text, geom\_violin}, \dots
    \item[\textcolor{aes}{aes}] aesthetics: maps a variable to the properties of a geom: \texttt{shape}, \texttt{color}, \texttt{fill}, \texttt{linetype}, transparency (\texttt{alpha}), \dots
    \item[\textcolor{scale}{scale}] How are data mapped visually (\texttt{log}, \texttt{date}, 
    \texttt{colors}, \texttt{sizes}, \dots)
    \item[\textcolor{theme}{theme}] The general plot apperance (\texttt{background}, \texttt{axes}, \texttt{labels}, \dots)
\end{description}
\pause
\vspace{1em}
\begin{alertblock}{Tip:}
Never use \texttt{qplot()} (=quick plot)! - You won't learn the grammar...
\end{alertblock}
\end{frame}


%%% ---------------------------------------------------------------------------
\plain{Univariate Data}

\begin{frame}[fragile]
\frametitle{\textcolor{geom}{geom:} histogram}
<<warning = FALSE>>=
ggplot(frogs,                   # use the frogs
           aes(x = elevation))+   # take the variable 'elevation' from the dataset) 
  geom_histogram()              # display a histogramm
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{geom}{geom:} density + rug}
We can add multiple geoms of the same variable to the plot
<<warning = FALSE>>=
ggplot(frogs, aes(x = elevation)) +     # plot the 'elevation' from the frogs data
  geom_density() +                      # display a density
  geom_rug()                            # display a rug
@
\end{frame}




\plain{Exercise 1: \\ Plot a histogramm of diamond prices at different binwidths (50, 500, 5000). \\ How does this affect the preception of the data?}
\begin{frame}[fragile]
\frametitle{Exercise}
<<fig.width=10, fig.height=7, out.width='.75\\linewidth', warning = FALSE, echo = FALSE, message=FALSE>>=
require(gridExtra)
p0 <- ggplot(diamonds) +
  geom_histogram(aes(x = price), binwidth = 5000) +
  ggtitle("bw = 5000")
p1 <- ggplot(diamonds) +
  geom_histogram(aes(x = price), binwidth = 500) +
  ggtitle("bw = 500")
p2 <- ggplot(diamonds) +
  geom_histogram(aes(x = price), binwidth = 50) +
  ggtitle("bw = 50")
grid.arrange(p0, p1, p2, nrow = 1)
@
\end{frame}



%%% -------------------------------------------------------------------------------------------
\plain{Bivariate data \\ (cont. x cont.)}

\begin{frame}[fragile]
\frametitle{\textcolor{geom}{geom:} point (=cont. x cont.)}
The mother of all plots.
<<>>=
ggplot(frogs, aes(x = count1, y = count2)) +
  geom_point()
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{aes}{aesthetic:} color (discrete)}
Differentiate between fish and no-fish:
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point()
@
\end{frame}

\begin{frame}[fragile]
\frametitle{\textcolor{aes}{aesthetic:} color (continuous)}
Continuous color scale:
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = sqrt(waterarea))) +
  geom_point()
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{aes}{aesthetics}: shape}
Can also differentiate by shape:
<<>>=
ggplot(frogs, aes(x = count1, y = count2, shape = fish)) +
  geom_point()
@
\end{frame}



\begin{frame}[fragile]
\frametitle{\textcolor{aes}{aesthetics}: shape + color}
Can also differentiate by shape:
<<>>=
ggplot(frogs, aes(x = count1, y = count2, shape = fish, col = fish)) +
  geom_point()
@
\pause
\begin{alertblock}{Tip:}
Do not use redundant aesthetics.
\end{alertblock}
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{aes}{aesthetics:} alpha (=transparency)}
<<out.width='.4\\linewidth'>>=
ggplot(frogs) +
  geom_point(aes(x = count1, y = count2, col = fish), alpha = 0.4)
@
Q: alpha is not within aes(), why?
\pause
\begin{alertblock}{A:}
Within \texttt{aes()} the \textcolor{aes}{aesthetic} changes with the specified variable (e.g. \texttt{col = fish}). Outside of \texttt{aes} we set it to a specific value.
\end{alertblock}
\end{frame}



\plain{Exercise 2: \\
Create this plot:
<<fig.width=8, fig.height = 7, out.width='.7\\linewidth', echo = FALSE>>=
ggplot(diamonds, aes(x = carat, y = price, col = color)) +
  geom_point(alpha = 0.2)
@
}



%%% -------------------------------------------------------------------------------------------
\plain{Bivariate data \\ (discrete x continuous)}
\begin{frame}[fragile]
\frametitle{\textcolor{geom}{geom:} boxplot}
\begin{itemize}
\item More then 45 years (Tukey 1970)
\item For discrete scales (here fish)
\end{itemize}

<<>>=
ggplot(frogs, aes(x = fish, y = elevation)) +
  geom_boxplot()
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{aes}{aesthetic:} color (discrete)}
<<>>=
ggplot(frogs, aes(x = fish, y = elevation, col = vegetation)) +
  geom_boxplot()
@

\begin{alertblock}{Tip:}
Nice for factorial designs (e.g. easily spot interactions).
\end{alertblock}

\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{aes}{aesthetic:} fill (discrete)}
<<>>=
ggplot(frogs, aes(x = fish, y = elevation, fill = vegetation)) +
  geom_boxplot()
@
\end{frame}

\begin{frame}[fragile]
\frametitle{\textcolor{geom}{geom:} violin}
The Violin plot is a powerful alterative/addition:
<<>>=
ggplot(frogs, aes(x = fish, y = elevation)) +
  geom_violin() +
  geom_boxplot(width = 0.3)
@
\begin{alertblock}{Tip:}
The order of geoms is important! Uppermost layer is the last \textcolor{geom}{geom} specified.
\end{alertblock}
\end{frame}


\plain{Exercise 3: \\
Create this plot:
<<fig.width=8, fig.height = 7, out.width='.7\\linewidth', echo = FALSE>>=
ggplot(diamonds, aes(x = cut, y = price)) +
  geom_violin() +
  geom_boxplot(width = 0.15, fill = 'grey90')
@
}



%%% ----------------------------------------------------------------------------
\plain{Multivariate data \\ (Facets)}

\begin{frame}[fragile]
\frametitle{Subgroupgs}
The different relationships between \emph{fish} and \emph{no fish} are hard to spot:
<<>>=
ggplot(frogs, aes(x = elevation, y = count1, col = fish)) +
  geom_point()
@
\end{frame}


\begin{frame}[fragile]
\frametitle{facets: Split the plots by groups}
<<fig.width=8, fig.height = 3, out.width='.8\\linewidth'>>=
ggplot(frogs, aes(x = elevation, y = count1, col = fish)) +
  geom_point() +
  facet_wrap(~fish)
@
\pause
\begin{alertblock}{Tip:}
The color here is redundant!
\end{alertblock}
\end{frame}



\begin{frame}[fragile]
\frametitle{facets: Split the plots by groups}
\begin{itemize}
\item \texttt{facet\_wrap()} wraps into a rectagular layout
\item \texttt{facet\_grid(rows \textasciitilde cols)} wraps into rows and columns
\end{itemize}
<<fig.width=7, fig.height = 4, out.width='.8\\linewidth'>>=
ggplot(frogs, aes(x = elevation, y = count1, col = fish)) +
  geom_point() +
  facet_grid(vegetation~fish)
@
\end{frame}


\begin{frame}[fragile]
\frametitle{facets: Split the plots by groups}
\begin{itemize}
\item add text to strip to identify variables with \texttt{labeller = label\_both}
\end{itemize}
<<fig.width=7, fig.height = 4, out.width='.8\\linewidth'>>=
ggplot(frogs, aes(x = elevation, y = count1, col = fish)) +
  geom_point() +
  facet_grid(vegetation~fish, labeller = label_both)
@
\end{frame}



\begin{frame}[fragile]
\frametitle{facets: Split the plots by groups}
\begin{itemize}
\item Both rows have the same scale.
\item use \texttt{scales = "free" or "frex\_x", "free\_y"} to adjust
\end{itemize}
<<fig.width=7, fig.height = 4, out.width='.8\\linewidth'>>=
ggplot(frogs, aes(x = elevation, y = count1, col = fish)) +
  geom_point() +
  facet_grid(vegetation~fish, 
             scales = 'free_y')
@
\end{frame}


\plain{Exercise 4: \\
Create this plot:
<<fig.width=8, fig.height = 7, out.width='.7\\linewidth', echo = FALSE>>=
ggplot(diamonds, aes(x = carat, y = price, col = clarity)) +
  geom_point(alpha = 0.3) +
  facet_grid(cut ~ color, labeller = label_both)
@
}



%%% ----------------------------------------------------------------------------
\plain{Aggregated data \\ (Visualize errors)}

\begin{frame}[fragile]
\frametitle{Aggregate data}
\begin{itemize}
\item Often we want to show aggregates of our data (e.g. means and CIs)
\end{itemize}

<<>>=
ggplot(frogs, aes(x = fish, y = elevation)) +
  geom_point(position = position_jitter(width = 0.2), alpha = 0.2)
@
\end{frame}



\begin{frame}[fragile]
\frametitle{Aggregate data}
\begin{itemize}
\item Aggregate first, then plot!
\item A lot of possibilities to aggregate (\texttt{plyr}, \texttt{dplyr}, \texttt{data.table}, \texttt{sqldf},
\texttt{ave()}, \texttt{doBy}, \dots)
\item I use \texttt{plyr} solutions here.
\end{itemize}
<<>>=
require(plyr)
mean_ci <- ddply(frogs, .(fish), summarise, 
      mean = mean(elevation),
      err = qnorm(0.975) * sd(elevation) / sqrt(length(elevation)))
mean_ci
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{geom}{geom:} bar}
<<out.width='.5\\linewidth'>>=
ggplot(mean_ci, aes(x = fish, y = mean)) +
  geom_bar(stat = 'identity')
@
\begin{itemize}
  \item We need to set \texttt{stat = 'identity'} so that the heights of the bars represent the mean.
  \item Otherwise \texttt{geom\_bar} tries to transform the data (height = number of cases per group)
\end{itemize}
\pause
  \begin{alertblock}{Tip:}
  Don't use bars to display means. Bad data-to-ink ratio (Tufte)!
  \end{alertblock}
\end{frame}



\begin{frame}[fragile]
\frametitle{\textcolor{geom}{geom:} errorbars}
<<>>=
ggplot(data = mean_ci, aes(x = fish, y = mean)) +
  geom_point(size = 4) +
  geom_errorbar(aes(ymin = mean - err, ymax = mean + err), width = 0.2)
@

\begin{itemize}
\item points are enough to represent the means
\item \texttt{width = 0.2} fo smaller whisker (default = 1)
\end{itemize}
\end{frame}


\begin{frame}[fragile]
\frametitle{Combining different datasets into on plot}
<<>>=
ggplot() +
  geom_point(data = mean_ci, aes(x = fish, y = mean), size = 4) +
  geom_errorbar(data = mean_ci, aes(x = fish, y = mean, 
                                    ymin = mean - err, ymax = mean + err), 
                width = 0.2, size = 1) +
  geom_point(data = frogs, aes(x = fish, y = elevation), 
             position = position_jitter(width = 0.2), 
             alpha = 0.2, size = 4) 
@
\end{frame}

\begin{frame}[fragile]
\frametitle{Combining different datasets into one plot}
<<eval=FALSE>>=
ggplot() +
  geom_point(data = mean_ci, aes(x = fish, y = mean), size = 4) +
  geom_errorbar(data = mean_ci, aes(x = fish, y = mean, 
                                    ymin = mean - err, ymax = mean + err), 
                width = 0.2, size = 1) +
  geom_point(data = frogs, aes(x = fish, y = elevation), 
             position = position_jitter(width = 0.2), 
             alpha = 0.2, size = 4) 
@
\begin{itemize}
  \item Because we have multiple datasets, we cannot pass them globally in \texttt{ggplot()}
  \item specify data and aesthetics for each layer / geom
  \item \texttt{geom\_violin} + \texttt{geom\_jitter} are a good combination
\end{itemize}
\pause
  \begin{alertblock}{Tip:}
  Plotting the raw data is a good idea (spot errors, make data available, etc...)
  \end{alertblock}
\end{frame}




%%% ----------------------------------------------------------------------------
\plain{maps}
\begin{frame}[fragile]
\frametitle{Easy maps with ggmap}
\begin{itemize}
  \item \texttt{ggmap} can retrieve maps from different sources (Google Maps, OpenStreetMap, StamenMaps, and CloudMade Maps).
  \item Needs coordinates in lat/lon formant
  \item easy, consistent and modularframework for spatial graphics 
  \item Workflow: Prepare data > retrive background map > add layers
\end{itemize}
\end{frame}


\begin{frame}[fragile]
\frametitle{1) Prepare data: Transform coordinates to lat/lon}
\begin{itemize}
  \item Coordinates in frogs dataset are in CH1903 / LV03 format
  \item Transform using \texttt{sp} package to lat / lon
\end{itemize}

<<message = FALSE>>=
require(sp)
frogs_sp <- frogs
coordinates(frogs_sp) <- ~x+y
proj4string(frogs_sp) <- CRS("+init=epsg:21781")
# transform coordinates to WGS84 (lat/lon)
frogs_84 <- spTransform(frogs_sp, CRS("+init=epsg:4326"))
@

<<size="tiny">>=
head(coordinates(frogs_sp))
head(coordinates(frogs_84))
@
\end{frame}



\begin{frame}[fragile]
\frametitle{2) Retrieve backgound map}
\begin{itemize}
  \item \texttt{get\_map()} needs a location of which to retrive the map
  \item I use here the bounding box of the coordinates, but adress or a coordinate work also
  \item other useful options are \emph{zoom} and \emph{maptype}
\end{itemize}

<<message = FALSE, warning=FALSE>>=
require(ggmap)
ggmap(get_map(frogs_84@bbox, source = 'google'), zoom = 10)
@
\end{frame}


\begin{frame}[fragile]
\frametitle{3) Add layers}
<<message = FALSE, warning=FALSE>>=
ggmap(get_map(frogs_84@bbox, source = 'google', zoom = 10)) +
  geom_point(data = data.frame(frogs_84), 
             aes(x = x, y = y, col = elevation), 
             size = 2,
             shape = 18)
@
\end{frame}




%%% ----------------------------------------------------------------------------
%%% ----------------------------------------------------------------------------
\plain{Break! \\[2em] Now we had enough of the basics \\ Next part: How to customize your plots.}


\plain{Customization and Prettification}

%%% ----------------------------------------------------------------------------
%% labels
\begin{frame}[fragile]
\frametitle{Working with labels}
\begin{itemize}
  \item \texttt{labs()} can be used to set axis labels \& title
\end{itemize}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = sqrt(waterarea))) +
  geom_point() +
  labs(x = 'Count at date 1', y = 'Count at date 3', title = 'Date 1 vs Date 2')
@
\end{frame}


\begin{frame}[fragile]
\frametitle{Working with labels: plotmath}
\begin{itemize}
  \item For mathematical annotation use \texttt{plotmath} \texttt{?plotmath}
  \item wrap into \texttt{expression()}
  \item separate text with \textasciitilde
\end{itemize}
<<out.width='.5\\linewidth'>>=
ggplot(frogs, aes(x = count1, y = count2, col = sqrt(waterarea))) +
  geom_point() +
   labs(x = expression(sqrt(x[underscript]^superscript)), 
        y = expression('Greek gamma'~gamma), 
      title = expression(hat(y) <= frac(bar(x), sigma)~'; some text here'))
@
\end{frame}



%%% ----------------------------------------------------------------------------
%% log scales
\begin{frame}[fragile]
\frametitle{Working with axes: transformations / \textcolor{scale}{scales}}
\begin{itemize}
  \item The distribution of counts is highly skewed
  \item try a double log scale
\end{itemize}
<<>>=
ggplot(frogs, aes(x = count1 + 1, y = count2 + 1, col = sqrt(waterarea))) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10()
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{scale}{scales}}
<<eval = FALSE>>=
ggplot(frogs, aes(x = count1 + 1, y = count2 + 1, col = sqrt(waterarea))) +
  geom_point() +
  scale_x_log10() +
  scale_y_log10()
@
\begin{itemize}
\item General form: \textbf{\textcolor{scale}{scale}\_\textcolor{aes}{aesthetic}\_type}
\item type of scale (e.g. \texttt{log10, grey, continuous etc.})
\item data -> \textcolor{scale}{scale} -> \textcolor{aes}{aesthetic}
\end{itemize}
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{scale}{scales:} axes ticks}
<<out.width='.5\\linewidth'>>=
ggplot(frogs, aes(x = count1 + 1, y = count2 + 1, col = sqrt(waterarea))) +
  geom_point() +
  scale_x_continuous(breaks = c(0, 31.5, 101.7, 400)) +
  scale_y_log10(breaks = c(1, 10, 100, 400))
@
\begin{itemize}
\item use the \texttt{breaks=} argument to specify where ticks shoud be drawn.
\pause
\item Simplify the axes ticks to min / max only for presentations.
\end{itemize}
\end{frame}



\begin{frame}[fragile]
\frametitle{\textcolor{scale}{scales:} Change order discrete axes}
<<out.width='.5\\linewidth'>>=
ggplot(frogs, aes(x = fish, y = elevation)) +
   geom_boxplot() +
  scale_x_discrete(limits = c("1", "0"))
# or to generally reverse
# scale_x_discrete(limits = rev(levels(frogs$fish)))
@
\begin{itemize}
\item use the \texttt{limits=} argument to specify the order
\end{itemize}
\end{frame}


\begin{frame}[fragile]
\frametitle{axes: swap x and y}
<<>>=
ggplot(frogs, aes(x = fish, y = elevation)) +
   geom_boxplot() +
  coord_flip()
@
\begin{itemize}
\item Sometimes useful to compare the order \& magnitude (see slide 12)
\end{itemize}
\end{frame}




\begin{frame}[fragile]
\frametitle{\textcolor{scale}{scales:} \textcolor{aes}{color (manual)}}
\begin{itemize}
\item Manually select colors from built-in colors
\item see \texttt{?colors} and \texttt{demo("colors")} for possible values
\end{itemize}
<<out.width='.5\\linewidth'>>=
ggplot(frogs, aes(x = fish, y = elevation, fill = fish)) +
   geom_boxplot() +
  scale_fill_manual(values = c('steelblue', 'chocolate2'))
  
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{scale}{scales:} \textcolor{aes}{color (manual)}}
\begin{itemize}
\item Manually select colors from Hex code
\item a lot of generators on the web (e.g. \url{paletton.com})
\end{itemize}
<<>>=
ggplot(frogs, aes(x = fish, y = elevation, fill = fish)) +
   geom_boxplot() +
  scale_fill_manual(values = c('#7A9F35', '#226666'))
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{scale}{scales:} \textcolor{aes}{color (palettes)}}
\begin{itemize}
\item Select from a predefined palette
\item e.g. \url{http://colorbrewer2.org/}
\end{itemize}
<<>>=
ggplot(frogs, aes(x = fish, y = elevation, fill = fish)) +
   geom_boxplot() +
  scale_fill_brewer(palette = 'Dark2')
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{scale}{scales:} \textcolor{aes}{color (colorbrewer)}}
\begin{itemize}
\item The palettes can be classified into 3 categories of data:
  \begin{description}
  \item[sequential] change of a unique color. Use for qualitative data from low to high.
  \item[diverging] change from one color to another. Used to show deviations from the mean.
  \item[qualitative] maximze difference between colors. Used for categorical data.
  \end{description}
  \item Colorblind safe palettes (8\% of men are colorblind)
\end{itemize}
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{scale}{scales:} \textcolor{aes}{color (gradients)}}
\begin{itemize}
\item Change the gradient for a continuous variable
\end{itemize}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = log10(count1))) +
  geom_point() +
  scale_color_gradient(low = 'darkred', high = 'blue', na.value = 'green')
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{scale}{scales:} \textcolor{aes}{color (gradients)}}
\begin{itemize}
\item \texttt{scale\_*\_gradient2} for a diverging gradient
\item \texttt{midpoint} defaults to 0, changed to mean here
\end{itemize}
<<out.width='.5\\linewidth'>>=
midp <- mean(log10(frogs$count1+1))
ggplot(frogs, aes(x = count1, y = count2, col = log10(count1+1))) +
  geom_point() +
  scale_color_gradient2(low = 'red', mid = 'white', high = 'green', 
                        midpoint = midp, space = 'Lab')
@
\end{frame}

\plain{Exercise 5: \\
Create this plot:
<<out.width='.7\\linewidth', echo = FALSE>>=
ggplot(diamonds, aes(x = carat, y = price, col = color)) +
  geom_point() +
  labs(y = 'Price [US $]', x = expression('Weigth [ct = 2'%.%10^-4~'kg]')) +
  scale_color_brewer(palette = 'YlOrRd') +
  scale_y_log10(breaks = c(500,1000, 5000, 10000))
@
}



\begin{frame}[fragile]
\frametitle{Working with legends}
\begin{itemize}
\item used \texttt{scale\_x\_discrete(limits = c("1", "0"))} to change order on x-axis
\item how to change order in legend?
\end{itemize}
<<out.width='.5\\linewidth'>>=
ggplot(frogs, aes(x = fish, y = elevation, fill = fish)) +
geom_boxplot() +
scale_x_discrete(limits = c("1", "0"))
@
\end{frame}


\begin{frame}[fragile]
\frametitle{Working with legends: Change order}
\begin{itemize}
\item use scale for \textcolor{aes}{fill} aesthetic.
\item use \texttt{breaks = <levels>}.
\end{itemize}
<<out.width='.5\\linewidth'>>=
ggplot(frogs, aes(x = fish, y = elevation, fill = fish)) +
geom_boxplot() +
scale_x_discrete(limits = c('1', '0')) +
scale_fill_discrete(breaks = c('1', '0'))
@
\end{frame}


\begin{frame}[fragile]
\frametitle{Working with legends: Change legend title}
\begin{itemize}
\item use \texttt{name = <legendtitle>}
\end{itemize}
<<out.width='.5\\linewidth'>>=
ggplot(frogs, aes(x = fish, y = elevation, fill = fish)) +
geom_boxplot() +
scale_x_discrete(limits = c('1', '0')) +
scale_fill_discrete(name = 'Fish presence', breaks = c('1', '0'))
@
\end{frame}


%%% ---------------------------------------------------------------------------

\plain{Changing the appearance of the plots: \textcolor{theme}{Themes}}

\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} predefined themes}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  theme_classic()
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} predefined themes}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  theme_bw()
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} predefined themes}
\begin{itemize}
\item ggplot2 comes with the themes: \texttt{bw, classic, gray, light \& minimal}
\item see \texttt{ggthemes} package for more \url{https://github.com/jrnold/ggthemes}
\end{itemize}
<<message=FALSE, out.width='.5\\textwidth'>>=
require(ggthemes)
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  theme_wsj()
@
\end{frame}



\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} Your own theme}
\begin{itemize}
  \item Allows very fine control over your plots
  \item If done once, can be reused
  \item Every theme consists of several elements
  \item see \texttt{?theme} for a complete list
  \item we go through the most important elements one by one
\end{itemize}
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} axis text}
\begin{itemize}
  \item each element can be controlled with \texttt{element\_*}
  \item \texttt{text, line, rect, blank (=omit element)}
\end{itemize}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  theme(axis.text.x = element_text(angle = 50, size = 25, vjust = 0.5),
        axis.text.y = element_text(colour = 'green'))
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\texttt{hjust, vjust, angle?!}}
\begin{itemize}
  \item controls the vertical and horizontal justification
  \item 0 = left-justified; 1 = right-justified
\end{itemize}
<<fig.width=8, echo = FALSE, out.width='0.8\\textwidth'>>=
td <- expand.grid(
    hjust = c(0, 0.5, 1),
    vjust = c(0, 0.5, 1),
    angle = c(0, 45, 90),
    text = "text"
)

ggplot(td, aes(x = hjust, y = vjust)) + 
    geom_point() +
    geom_text(aes(label = text, angle = angle, hjust = hjust, vjust = vjust)) + 
    facet_grid(~angle) +
    scale_x_continuous(breaks = c(0, 0.5, 1), expand = c(0, 0.2)) +
    scale_y_continuous(breaks = c(0, 0.5, 1), expand = c(0, 0.2))
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} axis title}
\begin{itemize}
  \item if we omit the .x / .y the elemt is applied to both axes
\end{itemize}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  theme(axis.title = element_text(face = 'bold', colour = 'red', size = 25))
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} axis ticks}
\begin{itemize} 
  \item \texttt{element\_line()} for line elements.
\end{itemize}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  theme(axis.ticks.x = element_line(colour = 'red', size = 1),
        axis.ticks.y = element_blank())
@
\end{frame}



\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} legend title}
\begin{itemize}
  \item \texttt{element\_blank()} removes the element from the theme.
\end{itemize}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  theme(legend.title=element_blank())
@
\end{frame}




\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} legend title}
\begin{itemize}
  \item \texttt{element\_blank()} removes the element from the theme.
\end{itemize}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  theme(legend.title=element_text(colour = 'green'))
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} legend background}
\begin{itemize}
  \item \texttt{element\_rect()} for rectangular elements.
\end{itemize}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  theme(legend.key = element_rect(fill = 'green'))
@
\end{frame}



\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} position of the legend}
\begin{itemize}
  \item position can be \texttt{"none", "left", "right", "bottom", "top"}
   \item also check legend.direction (\texttt{"horizontal" or "vertical"})
\end{itemize}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  theme(legend.position = 'bottom')
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} panel background}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  theme(panel.background = element_rect(fill = 'grey50'))
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} panel grid}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  theme(panel.grid.major = element_line(colour = 'darkred', size = 2),
        panel.grid.minor = element_line(color = 'blue'))
@
\end{frame}


\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} strips (facets)}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  facet_wrap(~fish) +
  theme(strip.background = element_rect(colour = 'blue', fill = 'orange', linetype = 'dotted'),
        strip.text = element_text(face = 'bold'))
@
\end{frame}

\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} my theme}
\begin{itemize}
  \item my (often used) theme is based on \texttt{theme\_bw()}
  \item bold and bigger fonts, cleaner strips
  \item safe your theme as object (or better in a separate .R file) and add it to the plot to apply it
\end{itemize}
<<>>=
edis_theme <- theme_bw(base_size = 12, base_family = "Helvetica") + 
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(), 
        text = element_text(size = 14),
        axis.text = element_text(size = 12),
        axis.title.x = element_text(size = 14,face = "bold", vjust = 0),
        axis.title.y = element_text(size = 14,face = "bold", vjust = 1),
        legend.position = "bottom",
        legend.key = element_blank(),
        strip.background = element_blank(),
        strip.text = element_text(size = 14, face = 'bold'))
@
\end{frame}



\begin{frame}[fragile]
\frametitle{\textcolor{theme}{Themes:} my theme}
<<>>=
ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point() +
  facet_wrap(~fish) +
  edis_theme
@
\end{frame}

\plain{Exercise 5: \\
Create this plot:
<<fig.width = 10, out.width='.7\\linewidth', echo = FALSE>>=
ggplot(diamonds, aes(x = carat, y = price, col = color)) +
  geom_point() +
  labs(y = 'Price [US $]', x = 'Weigth [ct]') +
  facet_grid(.~cut) +
  scale_x_continuous(breaks = c(0, 2.5, 5)) +
  scale_color_brewer(name = 'Color of \n diamond', palette = 'RdYlGn') + 
  theme(axis.title.x = element_text(size = 20,face = "bold", vjust = 0),
        axis.title.y = element_text(size = 20,face = "bold", vjust = 1),
        strip.background = element_rect(fill = 'gold'),
        panel.grid.minor = element_blank(),
        panel.grid.major = element_line(colour = 'grey80', linetype = 'dotted'),
        panel.background = element_rect(fill = 'white'),
        legend.key = element_blank(), 
        axis.line = element_line(colour = 'gold', size = 1.5))
@
}



%%% ---------------------------------------------------------------------------
\plain{Exporting your plots}

\begin{frame}[fragile]
\frametitle{Export your to a file}
\begin{itemize}
  \item save your plot as object
  \item use \texttt{ggsave()} to save the object
\end{itemize}
<<>>=
p <- ggplot(frogs, aes(x = count1, y = count2, col = fish)) +
  geom_point()
@

<<eval = FALSE>>=
# export to different formats
ggsave('myplot.pdf', p)
ggsave('myplot.png', p)
ggsave('myplot.svg', p)
@
\end{frame}


\begin{frame}[fragile]
\frametitle{Use the vector format!}
\begin{itemize}
  \item use the vector format for graphics without loss
  \item either .pdf (no post-manipulation) or .svg (easy post-manipulation)
  \item For MS Office use high-resolution png:
\end{itemize}
<<eval = FALSE>>=
ggsave('myplot.png', p, width = 7, heigh = 6, dpi = 300)
@
\end{frame}


\begin{frame}[fragile]
\frametitle{Use the vector format!}
\begin{itemize}
  \item My workflow:
  \begin{enumerate}
    \item save as .svg
    \item (optional) manipulate in inkscape
    \item convert to needed format using inkscape (bash script)
  \end{enumerate}
\end{itemize}
<<eval = FALSE>>=
ggsave('myplot.svg', p, width = 7, heigh = 6)
@
\textcolor{myorange}{Inkscape Demo.}
\end{frame}




%%% ---------------------------------------------------------------------------
\plain{Misc stuff}

\begin{frame}[fragile]
\frametitle{\textcolor{geom}{geom:} smooth}
\begin{itemize}
  \item \texttt{geom\_smooth} is great to quickly visualize relationships
  \item I do \textcolor{myorange}{not} recommend the built-in model fitting functions
  \item better separate modelling from plotting
\end{itemize}
<<message = FALSE>>=
ggplot(frogs, aes(y = log10(count1  + 1), x = elevation, col = fish)) +
  geom_point() +
  geom_smooth(se = FALSE, linetype = 'dashed') +
  geom_smooth(se = FALSE, method = 'lm')
@
\end{frame}


\begin{frame}[fragile]
\frametitle{Annotate the plots}
<<out.width='.5\\textwidth'>>=
ggplot(frogs, aes(x = count1, y =count2)) +
  geom_point() +
  annotate('text', 
           x = max(frogs$count1), 
           y = frogs$count2[which.max(frogs$count1)], 
          label = paste0('The biggest number \n of frogs counted was ', 
                         max(frogs$count1)), 
          vjust = 1, hjust = 1, size = 3) +
  annotate('text', x = 300, y = 100, 
           label = 'This text is placed \n at (300, 100)', 
           size = 3, col = 'blue')
@
\end{frame}





%' combine plot arrgangeGrob


\plain{
\includegraphics[width = 0.7\textwidth]{fig/end.jpg}
}

\end{document}
